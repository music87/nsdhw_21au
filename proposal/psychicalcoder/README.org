#+TITLE: PolyLower - Mesh Simplification Using Quadric Error Metrics

* Basic Information
  
  The GitHub repository: https://github.com/psychicalcoder/polylower.git

* Problem To Solve

  3D models nowadays can be very detailed and complicated. However rendering
  these models requires a lot of computing resources, espically when there are
  multiple light sources. In many scenarios, there is no need to use such
  realistic models. Users can simplify their complicate model without intensively
  breaking the contour of the object.

  The algorithm I would like to use is [[http:www.cs.cmu.edu/~garland/Papers/quadrics.pdf][Surface Simplification Using Quadric Error Metrics]]
  published by Garland and Heckbert in 1997. This method is an iterative edge
  contraction algorithm that makes it easy to set up different simplification
  level. In brief, we gradually replace two close vertices with a new one. The
  new position is chosen by minimizing the total square distance between it
  and the planes that connect to the original two vertices. Since the square
  distance is quadratic, the new point can be found by differentiating and
  solving a linear system. 

* Perspective users

  + For those who want to create low-poly art, they can easily generate one with
    an existing 3d model.
  + 3D game developers can reduce the computer load by
    replacing some less important models with simplier ones.
  
* System Architecture

  [[./architecture.png]]
  
* API Description

*** load_wavefront(filename)
   This function parses a wavefront .obj file and returns a vertex tuples list
   and a face definition (3 vertex numbers) tuple list.

*** mesh_simplify(vertices, faces, level=0.5, allow_unconnected=False)
   This function simplify the mesh defined by the parameter vertices and faces.
   It returns a new mesh generated by reducing (1.0-*level*) of vertices from
   the input mesh. The allow_unconnected option allows the algorithm to contract
   two vertices that do not form an edge.

*** save_wavefront(filename, vertices, faces)
   This function save the mesh to a new file in wavefront object format.

* Engineering Infrastructure

*** Test
   + I still don't have any idea about how to automatically test the soundness of
     my implementation.
   + I plan to use pybind11 and pytest to test the calculation functionalities
     written in C++ such as linear system solver and cross product.
   + For the testing material, I would like to look for models with CreativeCommon
     ShareAlike(SA) license. 

*** Version Control
   + Git
  
  
* Schedule

  |--------+----------------------------------------------------------------|
  | Week   | What to do                                                     |
  |--------+----------------------------------------------------------------|
  | Week 1 | Implement wavefront format parser and saver                    |
  | Week 2 | Implement triangulation                                        |
  | Week 5 | Implement the main algorithm framework                         |
  | Week 6 | Implement the other componenets and finish the whole algorithm |
  | Week 3 | Write unitests and check if there is any bug                   |
  | Week 4 | Optimize                                                       |
  | Week 7 | Prepare the presentation                                       |
  | Week 8 | Prepare the presentation                                       |
